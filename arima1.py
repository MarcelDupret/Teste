# -*- coding: utf-8 -*-
"""ARIMA2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fDBPCeRayC2qJ4UrIKG3InviNPm6YsxI
"""

#pip install git+https://github.com/statsmodels/statsmodels

import warnings
import matplotlib.pyplot as plt
from pandas import read_csv
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt 

# evaluate an ARIMA model for a given order (p,d,q)
def evaluate_arima_model(X, arima_order):
	# prepare training dataset
	train_size = int(len(X) * 0.66)
	train, test = X[0:train_size], X[train_size:]
	ytrain, ytest = list(range(0,train_size)),list(range(train_size,len(X)))
	history = [x for x in train]
	# make predictions
	predictions = list()
	for t in range(len(test)):
		model = ARIMA(history, order=arima_order)
		model_fit = model.fit()
		yhat = model_fit.forecast()[0]
		predictions.append(yhat)
		history.append(test[t])
	# calculate out of sample error
	rmse = sqrt(mean_squared_error(test, predictions))
	plt.plot(ytrain,train)
	plt.plot(ytest, test, color = 'blue')
	plt.plot(ytest, predictions, color = 'red')
	plt.title('Previsao Shampoo')
	plt.show()
	return rmse
# evaluate combinations of p, d and q values for an ARIMA model
def evaluate_models(dataset, p_values, d_values, q_values):
	dataset = dataset.astype('float32')
	order = (p_values,d_values,q_values)
	rmse = evaluate_arima_model(dataset, order)
	print('ARIMA%s RMSE=%.3f' % (order,rmse))
 
# load dataset
series = read_csv('/Users/marcel/Documents/Python/daily-total-female-births.csv', header=0, index_col=0, parse_dates=True, squeeze=True)
# evaluate parameters
p_values = 6
d_values = 1
q_values = 0
warnings.filterwarnings("ignore")
print("Calculando ...")
evaluate_models(series.values, p_values, d_values, q_values)











